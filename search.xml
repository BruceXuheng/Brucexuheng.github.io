<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>内存泄漏/内存溢出</title>
      <link href="/2024/11/15/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F-%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA/"/>
      <url>/2024/11/15/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F-%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="一、内存泄漏-amp-内存溢出"><a href="#一、内存泄漏-amp-内存溢出" class="headerlink" title="一、内存泄漏 &amp; 内存溢出"></a>一、内存泄漏 &amp; 内存溢出</h1><p>​在软件开发与运行过程中，内存管理是一个至关重要的环节。然而，由于各种原因，如程序设计的缺陷或资源管理的不当，可能会导致两种常见的内存问题：内存泄漏（Memory Leak）和内存溢出（Memory Overflow）。各种语言&#x2F;操作系统上预防和解决也有不同方式方案,以下是关于两者概念的详细介绍：</p><h2 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏:"></a>内存泄漏:</h2><p>​内存泄漏指程序中已经不再需要使用的内存没有被释放，从而造成内存资源浪费和程序性能下降。其特征是程序使用内存总量持续增加，直到程序崩溃或者系统强制关闭。</p><p><strong>原因：</strong></p><ol><li>资源未被正确释放：程序动态分配了内存资源，但没有及时释放，导致内存泄漏。</li><li>垃圾回收机制失效：在使用Java等高级语言编写的程序中，垃圾回收机制负责自动释放不再使用的内存资源。但如果程序员在编写代码时存在逻辑错误，就有可能导致垃圾回收机制失效，进而导致内存泄漏。</li><li>循环引用：在使用面向对象编程语言时，两个对象之间可能会发生相互引用的情况。如果这种引用形成了一个环路，就会导致这些对象永远无法被释放，从而产生内存泄漏。</li></ol><p><strong>影响</strong>：</p><ul><li>系统崩溃：内存泄漏会导致系统可用内存不足，从而造成系统崩溃或者异常退出。</li><li>程序性能下降：内存泄漏会让程序占用更多的内存，导致程序性能下降，响应速度变慢。</li><li>安全问题：黑客可能会利用内存泄漏漏洞实现攻击，比如利用堆栈溢出漏洞进行缓冲区溢出攻击。</li></ul><p><strong>检测与避免方法</strong>：</p><ul><li>使用内存监控工具：<ul><li>Windows Task Manager、</li><li>Linux top命令、Valgrind</li><li>Android Liko KOOM Leakcanary</li></ul></li><li>代码审查：通过仔细阅读代码，找出可能导致内存泄漏的逻辑错误，发现和解决问题。</li><li>显式地释放资源：在程序中动态分配了内存后，一定要在不再需要使用这些资源时显式地释放它们。例如，在C语言中使用free函数进行内存释放。</li><li>使用智能指针：C++等语言中提供了智能指针的概念，可以自动管理内存，避免手动释放资源时遗漏。</li><li>避免循环引用：在使用面向对象编程时，尽量避免对象之间相互引用形成环路的情况。如果无法避免，可以使用弱引用等技术来解决。</li></ul><h2 id="内存溢出"><a href="#内存溢出" class="headerlink" title="内存溢出:"></a>内存溢出:</h2><p>​内存溢出是指程序在申请内存时，所需的内存空间超过了系统所分配的内存空间，使得程序无法正常运行.</p><p><strong>原因：</strong></p><ol><li>分配的内存过于庞大，在内存池中没有足够的连续空间满足需求。</li><li>内存泄漏：应用程序持续向系统申请内存空间，但没有及时释放，导致内存池被消耗殆尽。</li><li>代码编写问题：如未正确释放已经申请的内存、指针操作错误等。</li><li>操作系统本身限制了进程所能申请的最大内存。</li></ol><p><strong>影响</strong>：</p><p>​内存溢出会导致程序崩溃或者无法正常运行，因为它直接涉及到程序的运行空间不足。</p><p><strong>解决办法</strong>：</p><ul><li>优化代码：避免出现无效的内存分配和内存泄漏。</li><li>使用内存池技术：尽可能地重复利用已经申请的内存空间。</li><li>增大操作系统对程序可用的最大内存限制（前提是操作系统支持）。</li><li>将需要处理的数据划分为更小的块，分批进行处理，这样可以使每个块需要分配的内存量变小。</li></ul><h1 id="二、关联-x2F-区别"><a href="#二、关联-x2F-区别" class="headerlink" title="二、关联&#x2F;区别"></a>二、关联&#x2F;区别</h1><p><strong>关系</strong>:</p><p>​内存泄漏会造成内存溢出, 内存泄漏是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄漏危害可以忽略，但内存泄漏堆积起来后果很严重，无论多少内存，迟早会被占光，最终会导致内存溢出。</p><p><strong>区别:</strong></p><ul><li><p>发生时机：内存溢出通常发生在程序运行时，当数据结构的大小超过预设限制或者递归调用栈过深时，就会发生内存溢出。而内存泄漏则是在程序持续运行过程中逐渐累积的，当不再使用的内存没有及时释放时，就会产生泄漏。</p></li><li><p>表现方式: 内存溢出会导致程序崩溃或者无法正常运行，因为它直接涉及到程序的运行空间不足。而内存泄漏在初期可能不会对程序产生明显影响，但随着时间的推移，未释放的内存不断累积，最终会导致系统资源耗尽，程序性能下降。</p></li><li><p>解决方案: 对于内存溢出，解决方法通常涉及到优化数据结构和算法，减少内存消耗，或者增加系统可用内存。而解决内存泄漏则需要定位泄漏源头，修复代码中的内存管理问题，确保不再使用的内存能够被及时释放。</p></li></ul><h1 id="三、Android"><a href="#三、Android" class="headerlink" title="三、Android"></a>三、Android</h1><h2 id="内存泄漏场景"><a href="#内存泄漏场景" class="headerlink" title="内存泄漏场景:"></a>内存泄漏场景:</h2><h3 id="1-非静态内部类-x2F-匿名内部类"><a href="#1-非静态内部类-x2F-匿名内部类" class="headerlink" title="1. 非静态内部类&#x2F;匿名内部类"></a>1. 非静态内部类&#x2F;匿名内部类</h3><p><strong>造成原因</strong>：非静态内部类默认会持有外部类的引用，如果内部类的生命周期超过了外部类，就会造成内存泄漏。</p><p><strong>场景</strong>：当Activity销毁后，由于内部类中存在异步耗时任务还在执行，导致Activity实例一直被内部类持有无法被回收，造成内存泄漏。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line"> <span class="comment">// ... ...       </span></span><br><span class="line">         Button.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="comment">// 模拟耗时操作</span></span><br><span class="line">                            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解决办法</strong>：使用静态内部类，并通过弱引用的方式持有外部类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_test);</span><br><span class="line"></span><br><span class="line">        <span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> findViewById(R.id.button);</span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyRunnable</span>()).start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 模拟耗时操作</span></span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-静态成员变量造成的内存泄漏"><a href="#2-静态成员变量造成的内存泄漏" class="headerlink" title="2. 静态成员变量造成的内存泄漏"></a>2. 静态成员变量造成的内存泄漏</h3><p><strong>造成原因</strong>：静态成员变量的生命周期等于应用程序的生命周期，如果该静态成员引用的变量生命周期小于该静态变量，就会造成内存泄漏。</p><p><strong>场景</strong>：静态成员变量持有了一个耗费资源过多的实例（如Activity、Fragment）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Activity mActivity;</span><br><span class="line"></span><br><span class="line">    Person(Activity activity) &#123;</span><br><span class="line">        mActivity = activity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解决办法</strong>：尽量避免使用Static成员变量引用资源耗费过多的实例，如果必须使用，可以使用Application的Context。这样可以随着应用生命周期创建销毁.</p><h3 id="3-单例模式造成的内存泄漏"><a href="#3-单例模式造成的内存泄漏" class="headerlink" title="3. 单例模式造成的内存泄漏"></a>3. 单例模式造成的内存泄漏</h3><p><strong>造成原因</strong>：单例模式由于其具有静态特性，导致其生命周期等于应用程序生命周期，如果单例中持有别的类的实例，就会造成内存泄漏。</p><p><strong>场景</strong>：单例模式中持有一个耗费资源过多的实例（如Context）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleInstance</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleInstance instance;</span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingleInstance</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mContext = context; <span class="comment">// 传递的是Activity的context</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingleInstance <span class="title function_">getInstance</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">SingleInstance</span>(context);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解决办法</strong>：使用Application的Context代替Activity的Context。</p><h3 id="4-Handler造成的内存泄漏"><a href="#4-Handler造成的内存泄漏" class="headerlink" title="4. Handler造成的内存泄漏"></a>4. Handler造成的内存泄漏</h3><p><strong>造成原因</strong>：Handler会持有外部类的对象（如Activity），如果Handler中还有消息没执行完，此时创建Handler的Activity关闭就会造成内存泄漏。</p><p><strong>场景</strong>：Activity中通过一个子线程异步请求网络数据，请求成功后更新当前页面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Handler</span> <span class="variable">mHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Handler</span>(Looper.getMainLooper()) &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">            <span class="comment">// 更新页面</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成功获取到网络数据后更新页面</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleData</span><span class="params">(String data)</span> &#123;</span><br><span class="line">        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> Message.obtain();</span><br><span class="line">        message.obj = data;</span><br><span class="line">        mHandler.sendMessage(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解决办法</strong>：</p><ol><li>使用静态内部类+弱引用。</li><li>在Activity销毁时，及时清理消息队列中的消息。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyHandler</span> <span class="keyword">extends</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> WeakReference&lt;MainActivity&gt; mActivity;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyHandler</span><span class="params">(MainActivity activity)</span> &#123;</span><br><span class="line">            mActivity = <span class="keyword">new</span> <span class="title class_">WeakReference</span>&lt;&gt;(activity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">            <span class="type">MainActivity</span> <span class="variable">activity</span> <span class="operator">=</span> mActivity.get();</span><br><span class="line">            <span class="keyword">if</span> (activity != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 更新页面</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MyHandler mHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        mHandler = <span class="keyword">new</span> <span class="title class_">MyHandler</span>(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        <span class="keyword">if</span> (mHandler != <span class="literal">null</span>) &#123;</span><br><span class="line">            mHandler.removeCallbacksAndMessages(<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-资源性对象未关闭造成的内存泄漏"><a href="#5-资源性对象未关闭造成的内存泄漏" class="headerlink" title="5. 资源性对象未关闭造成的内存泄漏"></a>5. 资源性对象未关闭造成的内存泄漏</h3><p><strong>造成原因</strong>：对于资源性对象（如BroadcastReceiver、EventBus等），在不再使用时，应该立即调用其close()函数将其关闭，然后再置为null。否则会造成内存泄漏。</p><p><strong>场景</strong>：Activity中注册了BroadcastReceiver，但在onDestroy方法中没有注销该接收器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> MyReceiver myReceiver;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        myReceiver = <span class="keyword">new</span> <span class="title class_">MyReceiver</span>();</span><br><span class="line">        registerReceiver(myReceiver, <span class="keyword">new</span> <span class="title class_">IntentFilter</span>(<span class="string">&quot;MY_ACTION&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 假设未重写onDestroy方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyReceiver</span> <span class="keyword">extends</span> <span class="title class_">BroadcastReceiver</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onReceive</span><span class="params">(Context context, Intent intent)</span> &#123;</span><br><span class="line">        <span class="comment">// 处理广播</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解决办法</strong>：在onDestroy方法中注销广播接收器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onDestroy();</span><br><span class="line">    unregisterReceiver(myReceiver); <span class="comment">// 解除注册</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-容器中的对象未清理造成的内存泄漏"><a href="#6-容器中的对象未清理造成的内存泄漏" class="headerlink" title="6. 容器中的对象未清理造成的内存泄漏"></a>6. 容器中的对象未清理造成的内存泄漏</h3><p><strong>造成原因</strong>：在使用集合类（如ArrayList、HashMap等）时，如果集合中的对象不再使用，但没有及时从集合中移除，就会导致这些对象无法被垃圾回收器回收，从而造成内存泄漏。</p><p><strong>场景</strong>：在Activity中创建了一个ArrayList来存储一些对象，但在Activity销毁时，没有清空这个ArrayList。</p><p><strong>解决办法</strong>：在Activity销毁时，清空集合中的对象，并将其置为null。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onDestroy();</span><br><span class="line">    <span class="keyword">if</span> (myList != <span class="literal">null</span>) &#123;</span><br><span class="line">        myList.clear();</span><br><span class="line">        myList = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Liko"><a href="#Liko" class="headerlink" title="Liko"></a>Liko</h2><p>在 OOM 和内存触顶时通过用户无感知 dump 来获取 HPROF 文件，当 App 退出到后台且内存 充足的情况进行分析，裁剪 HPROF 回传进行分析</p><h2 id="KOOM"><a href="#KOOM" class="headerlink" title="KOOM"></a>KOOM</h2><p>利用系统内核COW(Copy-on-write，写时复制)机制，每次dump内存镜像前先暂停虚拟机，然后fork子进程来执行dump操作，父进程在fork成功后立刻恢复虚拟机运行，整个过程对于父进程来讲总耗时只有几毫秒。内存镜像于闲时进行独立进程单线程本地分析，分析完即删除。</p><h2 id="LeakCanary"><a href="#LeakCanary" class="headerlink" title="LeakCanary"></a>LeakCanary</h2><p>原理分析</p><p>分为以下几步：</p><ol><li>监测Activity 的生命周期的 onDestroy() 的调用。</li><li>当某个 Activity 的 onDestroy() 调用后，便对这个 activity 创建一个带 ReferenceQueue 的弱引用，并且给这个弱引用创建了一个 key 保存在 Set集合 中。</li><li>如果这个 activity 可以被回收，那么弱引用就会被添加到 ReferenceQueue 中。</li><li>等待主线程进入 idle(即空闲)后，通过一次遍历，在 ReferenceQueue 中的弱引用所对应的 key 将从 retainedKeys 中移除，说明其没有内存泄漏。</li><li>如果 activity 没有被回收，先强制进行一次 gc，再来检查，如果 key 还存在 retainedKeys 中，说明 activity 不可回收，同时也说明了出现了内存泄漏。</li><li>发生内存泄露之后，dump内存快照，分析 hprof 文件，找到泄露路径（使用 haha 库分析），发送到通知栏</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android系统进程-思维构建</title>
      <link href="/2024/08/26/Android%E7%B3%BB%E7%BB%9F%E8%BF%9B%E7%A8%8B-%E6%80%9D%E7%BB%B4%E6%9E%84%E5%BB%BA/"/>
      <url>/2024/08/26/Android%E7%B3%BB%E7%BB%9F%E8%BF%9B%E7%A8%8B-%E6%80%9D%E7%BB%B4%E6%9E%84%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="init进程"><a href="#init进程" class="headerlink" title="init进程"></a>init进程</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>init进程并非鼻祖进程, 真正的鼻祖是进程id为0的 swapper进程(idele进程).</p><p>init的进程(pid&#x3D;1), 是Android用户空间所有进程的鼻祖, 还有一个兄弟进程kthread进程(pid&#x3D;2), 是Android内核空间所有进程的鼻祖.</p><p>init会 fork&#x2F;clone 多个子进程, vold\adbd\lmkd\logd\surfaceflinger\servicemanager\zygote(systemserver(AMS&#x2F;WMS&#x2F;PMS)&#x2F;launcher&#x2F;phone&#x2F;camera)</p><h3 id="surfaceflinger进程"><a href="#surfaceflinger进程" class="headerlink" title="surfaceflinger进程"></a>surfaceflinger进程</h3><pre><code>作用是：把多个来源的图像数据，如需合成则进行合成 否则直接提交给display驱动进行显示</code></pre><h3 id="lmkd进程-Low-Memory-Killer-Daemon"><a href="#lmkd进程-Low-Memory-Killer-Daemon" class="headerlink" title="lmkd进程 Low Memory Killer Daemon"></a>lmkd进程 Low Memory Killer Daemon</h3><pre><code>低内存杀手守护进程, 查杀进程的。会监控内存的使用情况，当达到一定阀值的时候，会去杀掉一些处于后台的、优先级低的、占用内存高的进程, 是一个守护进程，会在后台默默的为内存的健康保驾护航.</code></pre><h3 id="logd"><a href="#logd" class="headerlink" title="logd"></a>logd</h3><pre><code>log功能</code></pre><h3 id="servicemanager进程"><a href="#servicemanager进程" class="headerlink" title="servicemanager进程"></a>servicemanager进程</h3><pre><code>为binder通信服务的，负责整个Android系统的binder通信 ，所以 需要提前启动</code></pre><h3 id="zygote进程"><a href="#zygote进程" class="headerlink" title="zygote进程"></a>zygote进程</h3><pre><code>init进程直接创建的子进程中唯一可以运行java代码的进程</code></pre><h2 id="进程启动"><a href="#进程启动" class="headerlink" title="进程启动"></a>进程启动</h2><pre><code>选用脚本语言定义创建子进程以及顺序,后缀.rc, 可定义子进程基础信息、触发条件、前置命令、创建命令，需要用init脚本语言来配置创建子进程的步骤如下1. 首先 子进程在以.rc的脚本文件中，使用service关键字来配置子进程相关的信息2. 其次 在init.rc文件中（init.rc文件到底是在哪个目录这个是不确定的）使用import关键字引入脚本文件，使用on关键字来配置子进程的触发条件，3. 触发条件配置完毕后，如若子进程在创建之前需要配置一些前置操作或命令，则基于触发条件下配置这些信息4. 最后 使用start关键字来配置创建子进程的命令。子进程的基础信息会被解析到Service实例中，所有的Service实例会存放到ServiceList对象中。触发条件和它包含的命令会被解析到Action实例中，所有的Action实例会存放到ActionManager对象中.</code></pre><h2 id="小计"><a href="#小计" class="headerlink" title="小计"></a>小计</h2><pre><code>子进程的善后都需要创建进程的处理,1. 首先我先使用sigaction函数来注册SIGCHLD信号，这样就可以监听到子进程的状态了2. 其次使用signalfd函数为SIGCHLD信号生成一个fd（文件描述符）3. 再次使用epoll来见监听上一步生成的fd是否有可读数据4. 如监听到fd上有可读数据，则证明子进程的状态发生了变化，还需要使用waitpid函数来获取是哪个子进程死掉了</code></pre><h1 id="servicemanager"><a href="#servicemanager" class="headerlink" title="servicemanager"></a>servicemanager</h1><h1 id="zygote"><a href="#zygote" class="headerlink" title="zygote"></a>zygote</h1><h1 id="systemserver进程"><a href="#systemserver进程" class="headerlink" title="systemserver进程"></a>systemserver进程</h1><h1 id="ActivityManagerService"><a href="#ActivityManagerService" class="headerlink" title="ActivityManagerService"></a>ActivityManagerService</h1><h1 id="WindowManagerService"><a href="#WindowManagerService" class="headerlink" title="WindowManagerService"></a>WindowManagerService</h1><h1 id="InputManagerService"><a href="#InputManagerService" class="headerlink" title="InputManagerService"></a>InputManagerService</h1><h1 id="PackageManagerService"><a href="#PackageManagerService" class="headerlink" title="PackageManagerService"></a>PackageManagerService</h1><h1 id="surfaceflinger进程-1"><a href="#surfaceflinger进程-1" class="headerlink" title="surfaceflinger进程"></a>surfaceflinger进程</h1><h1 id="四大组件"><a href="#四大组件" class="headerlink" title="四大组件"></a>四大组件</h1><h1 id="binder"><a href="#binder" class="headerlink" title="binder"></a>binder</h1><h1 id="handler"><a href="#handler" class="headerlink" title="handler"></a>handler</h1><h1 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h1><h1 id="ui绘制"><a href="#ui绘制" class="headerlink" title="ui绘制"></a>ui绘制</h1><h1 id="事件分发"><a href="#事件分发" class="headerlink" title="事件分发"></a>事件分发</h1><h1 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h1>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并行&amp;并发 静心理解</title>
      <link href="/2024/08/23/%E5%B9%B6%E8%A1%8C-%E5%B9%B6%E5%8F%91-%E9%9D%99%E5%BF%83%E7%90%86%E8%A7%A3/"/>
      <url>/2024/08/23/%E5%B9%B6%E8%A1%8C-%E5%B9%B6%E5%8F%91-%E9%9D%99%E5%BF%83%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="并行-amp-并发"><a href="#并行-amp-并发" class="headerlink" title="并行 &amp; 并发"></a>并行 &amp; 并发</h1><p>并行 ： 并行是指多个任务或者操作再同一时间点上同时执行.(前提是在支持多处理器机器及调度系统上)</p><p>并发 ： 并发是指多个任务或操作在同一时间段内交替执行, 快速地在多个任务之间切换, 看起来像是同时进行的.</p><h2 id="并行-更依赖硬件"><a href="#并行-更依赖硬件" class="headerlink" title="并行 更依赖硬件"></a>并行 更依赖硬件</h2><p>TAG: 物理分离, 资源独立</p><p>在每个核上独立执行一个任务, 更依赖硬件</p><h2 id="并发-更依赖系统"><a href="#并发-更依赖系统" class="headerlink" title="并发 更依赖系统"></a>并发 更依赖系统</h2><p>TAG: 资源共享, 时间片, 上下文切换</p><p>操作系统通过时间分片实现并发, 快速的在多个任务之间切换, 每个任务获得一小段CPU时间.  </p><h2 id="从物理层面了解"><a href="#从物理层面了解" class="headerlink" title="从物理层面了解"></a>从物理层面了解</h2><p>并行: 多个任务在物理上同时进行, 需要多个处理器或多核处理器来实现</p><p>并发: 多个任务在逻辑上同时进行, 实际是在单个处理器上通过快速切换来实现</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>并行: 包括负载均衡、通信开销、数据一致性等。需要处理任务之间的同步和通信问题。此外，并行程序可能受到资源限制（如内存带宽、网络延迟等）的影响，导致性能不如预期。</p><p>并发: 包括死锁、竞态条件、资源同步等。可以提高程序的响应性和吞吐量，但过多的上下文切换会增加系统开销，降低整体性能。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android Rust NDK</title>
      <link href="/2023/10/08/Android-Rust-NDK/"/>
      <url>/2023/10/08/Android-Rust-NDK/</url>
      
        <content type="html"><![CDATA[<p>一、集成Rust&amp;NDK开发 </p><ol><li><p>创建 moudle [:encrypt] 将完成Rust&amp;NDK</p></li><li><p>当前项目 build.gradle.kts  中引入插件</p><blockquote><p><a href="https://github.com/mozilla/rust-android-gradle#rust-android-gradle-plugin">Rust Android Gradle Plugin</a></p></blockquote><ol><li>id(“org.mozilla.rust-android-gradle.rust-android”) version “0.9.3” apply false</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span><br><span class="line">plugins &#123;</span><br><span class="line">    id(&quot;com.android.application&quot;) version &quot;8.1.0&quot; apply false</span><br><span class="line">    id(&quot;org.jetbrains.kotlin.android&quot;) version &quot;1.8.10&quot; apply false</span><br><span class="line">    id(&quot;com.android.library&quot;) version &quot;8.1.0&quot; apply false</span><br><span class="line">    id(&quot;org.mozilla.rust-android-gradle.rust-android&quot;) version &quot;0.9.3&quot; apply false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 [:encrypt] 中构建rust结构</p><ol><li><p>在当前moudle下执行命令 <code>cargo new rust</code></p><p>目录结构如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">encrypt</span><br><span class="line"> -libs</span><br><span class="line"> -rust</span><br><span class="line"> --src</span><br><span class="line"> --.gitignore</span><br><span class="line"> --Cargo.lock</span><br><span class="line"> --Cargo.toml</span><br><span class="line"> -src</span><br><span class="line"> -.gitignore</span><br><span class="line"> -build.gradle.kts</span><br><span class="line"> -consumer-rules.pro</span><br><span class="line"> -proguard-rules.pro</span><br></pre></td></tr></table></figure></li><li><p>配置Cargo.toml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[package]</span><br><span class="line">name = &quot;brencrypt&quot;</span><br><span class="line">version = &quot;0.1.0&quot;</span><br><span class="line">edition = &quot;2021&quot;</span><br><span class="line"></span><br><span class="line"># See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html</span><br><span class="line"></span><br><span class="line">[dependencies]</span><br><span class="line">jni = &quot;0.18.0&quot;</span><br><span class="line">   </span><br><span class="line">[lib]</span><br><span class="line">crate_type = [&quot;staticlib&quot;, &quot;cdylib&quot;]</span><br></pre></td></tr></table></figure></li></ol></li><li><p>在 [:encrypt] 中集成 mozilla.rust-android-gradle.</p><blockquote><p>具体说明查看 <a href="https://github.com/mozilla/rust-android-gradle#rust-android-gradle-plugin">Rust Android Gradle Plugin</a></p></blockquote><ol><li>id(“org.mozilla.rust-android-gradle.rust-android”) version “0.9.3”</li></ol>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id(&quot;com.android.library&quot;)</span><br><span class="line">    id(&quot;org.jetbrains.kotlin.android&quot;)</span><br><span class="line">    id(&quot;org.mozilla.rust-android-gradle.rust-android&quot;) version &quot;0.9.3&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>CargoExtension配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">extensions.configure(com.nishtahir.CargoExtension::class) &#123;</span><br><span class="line">    module = &quot;./rust&quot;  // Or whatever directory contains your Cargo.toml</span><br><span class="line">    libname = &quot;brencrypt&quot; // Or whatever matches Cargo.toml&#x27;s [package] name.</span><br><span class="line">    targets = listOf(&quot;arm&quot;,&quot;x86&quot;,&quot;arm64&quot;) // See bellow for a longer list of options</span><br><span class="line">    profile = &quot;release&quot; // The Cargo release profile to build.</span><br><span class="line">    prebuiltToolchains = true</span><br><span class="line">    // targetIncludes = [&#x27;libnotlibname.so&#x27;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>在项目下执行 <code>gradlew.bat cargobuild</code></p></li><li><p>so文件转移</p></li></ol><blockquote><p>目前 Mozilla 插件还不支持AGP8.0 有不少问题， 没办法自动迁移so</p></blockquote><p>​手动转移到  [:encrypt] 中jniLibs中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">main</span><br><span class="line">java</span><br><span class="line"> -jniLibs</span><br><span class="line"> --arm64-v8a</span><br><span class="line">  ---libbrencrypt.so</span><br><span class="line"> --armeabi-v7a</span><br><span class="line">  ---libbrencrypt.so</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国密汇总</title>
      <link href="/2023/09/05/%E5%9B%BD%E5%AF%86%E6%B1%87%E6%80%BB/"/>
      <url>/2023/09/05/%E5%9B%BD%E5%AF%86%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="国产密码算法包括SM1、SM2、SM3、SM4和SM7。"><a href="#国产密码算法包括SM1、SM2、SM3、SM4和SM7。" class="headerlink" title="国产密码算法包括SM1、SM2、SM3、SM4和SM7。"></a>国产密码算法包括SM1、SM2、SM3、SM4和SM7。</h1><h2 id="SM1-对称算法"><a href="#SM1-对称算法" class="headerlink" title="SM1 - 对称算法"></a>SM1 - 对称算法</h2><ul><li>分组长度和密钥长度均为128位.</li><li>该算法目前尚未公开.</li><li>该算法的安全性和软硬件实现性能与AES算法相当.</li><li>调用加密芯片的接口进行使用.</li></ul><h2 id="SM2-非对称密钥算法"><a href="#SM2-非对称密钥算法" class="headerlink" title="SM2 - 非对称密钥算法"></a>SM2 - 非对称密钥算法</h2><ul><li>加密强度为256位</li><li>该算法是一种基于椭圆曲线（ECC）</li></ul><h2 id="SM3-消息摘要"><a href="#SM3-消息摘要" class="headerlink" title="SM3 - 消息摘要"></a>SM3 - 消息摘要</h2><blockquote><p><a href="https://www.oscca.gov.cn/sca/xxgk/2010-12/17/content_1002389.shtml">https://www.oscca.gov.cn/sca/xxgk/2010-12/17/content_1002389.shtml</a></p></blockquote><ul><li>密码杂凑算法消息分组长度 为 512b, 摘要长度 256b</li><li>该算法为不可逆的算法， 具体算法是保密的。</li></ul><p>执行过程 &#x3D; &gt; 消息填充、消息扩展、迭代压缩</p><h2 id="SM4"><a href="#SM4" class="headerlink" title="SM4"></a>SM4</h2><ul><li>一种 Feistel 结构的分组密码算法，其分组长度和密钥长度均为128bit</li></ul><p>该算法为对称加密算法，其加密强度为128位 </p><h2 id="SM7"><a href="#SM7" class="headerlink" title="SM7"></a>SM7</h2><p>该算法是一种分组密码算法，分组长度为128比特，密钥长度也为128比特。</p><p>SM7适用于非接触式IC卡，应用包括身份识别类应用(门禁卡、工作证、参赛证)，票务类应用(大型赛事门票、展会门票)，支付与通卡类应用（积分消费卡、校园一卡通、企业一卡通等</p><h3 id="SM9"><a href="#SM9" class="headerlink" title="SM9"></a>SM9</h3><p>SM9 主要用于用户的身份认证。SM9 算法不需要申请数字证书，适用于互联网应用的各种新兴应用的安全保障。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>思考-写怎样的代码看着舒服(Java/Kotlin)</title>
      <link href="/2023/08/31/%E6%80%9D%E8%80%83-%E5%86%99%E6%80%8E%E6%A0%B7%E7%9A%84%E4%BB%A3%E7%A0%81%E7%9C%8B%E7%9D%80%E8%88%92%E6%9C%8D/"/>
      <url>/2023/08/31/%E6%80%9D%E8%80%83-%E5%86%99%E6%80%8E%E6%A0%B7%E7%9A%84%E4%BB%A3%E7%A0%81%E7%9C%8B%E7%9D%80%E8%88%92%E6%9C%8D/</url>
      
        <content type="html"><![CDATA[<p>看整齐条理的类文件代码 真的会少几条皱纹 </p><p>在想写怎么样的代码会舒服</p><p>深思熟虑问过各家AI后进行整合编码约定</p><p>目前对应代码量比较多的是Java\Kotlin, 算是阅读量和编写量最多的语言, 汇总如下</p><h2 id="Java-Class-Layout"><a href="#Java-Class-Layout" class="headerlink" title="Java Class Layout"></a>Java Class Layout</h2><p>属性变量</p><ol><li>静态&#x2F;常量变量</li><li>私有&#x2F;公共成员变量（非静态变量）<br>构造</li><li>构造方法<br>方法</li><li>单例方法（如果有）</li><li>公共&#x2F;私有方法(非静态)</li><li>静态方法<br>内部类</li><li>静态&#x2F;内部类（如果有）</li></ol><h2 id="Kotlin-Class-Layout"><a href="#Kotlin-Class-Layout" class="headerlink" title="Kotlin Class Layout"></a>Kotlin Class Layout</h2><blockquote><p><a href="https://kotlinlang.org/docs/coding-conventions.html#class-layout">https://kotlinlang.org/docs/coding-conventions.html#class-layout</a></p></blockquote><ol><li><p>Property declarations and initializer blocks<br>属性声明和初始值设定项块</p></li><li><p>Secondary constructors<br>辅助构造函数</p></li><li><p>Method declarations<br>方法声明</p></li><li><p>Companion object<br>伴随对象</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin Exception Handling</title>
      <link href="/2023/08/08/Kotlin-Exception-Handling/"/>
      <url>/2023/08/08/Kotlin-Exception-Handling/</url>
      
        <content type="html"><![CDATA[<h3 id="1-普通处理异常"><a href="#1-普通处理异常" class="headerlink" title="1. 普通处理异常"></a>1. 普通处理异常</h3><blockquote><p>这种是普通的写法，明了的处理异常<br>Kotlin也支持多个catch捕获</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> Throwable(<span class="string">&quot;Diy Exception&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">    print(<span class="string">&quot;Exception-&gt; <span class="subst">$&#123;e.message&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">    print(<span class="string">&quot;finally&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-inline模式处理异常"><a href="#2-inline模式处理异常" class="headerlink" title="2. inline模式处理异常"></a>2. inline模式处理异常</h3><blockquote><p>封装处理不会导致程序异常终止, 易于使用, 提供代码质量和开发效率<br>吐槽一点 kotlin 不支持异常检查很不好, 需要人去识别可能出现的各种异常, 在对接各类功能接口很容易被忽略异常</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">fun main() &#123;</span><br><span class="line">    var p = Person()</span><br><span class="line">    p.name = null</span><br><span class="line">    nameCatch(action = &#123;</span><br><span class="line">        val n: String = p.name ?: fail(&quot;name is null&quot;)</span><br><span class="line">    &#125;, exceptionFinally = &#123;</span><br><span class="line">        print(&quot;exceptionFinally&quot;)</span><br><span class="line">    &#125;)</span><br><span class="line">    print(&quot;================&quot;)</span><br><span class="line">    print(5)</span><br><span class="line">    print(&quot;================&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inline fun nameCatch(action: () -&gt; Unit, exceptionFinally: () -&gt; Unit) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        action()</span><br><span class="line">    &#125; catch (e: Exception) &#123;</span><br><span class="line">        print(&quot;inline try catch -&gt; $&#123;e.message&#125;&quot;)</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        exceptionFinally()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter 记录</title>
      <link href="/2023/06/25/Flutter-%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/06/25/Flutter-%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>check 环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter doctor</span><br></pre></td></tr></table></figure><p>同意 Android 协议</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter doctor --android-licenses</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Scrcpy Frp 远程操控/调试Android手机</title>
      <link href="/2023/06/25/Android-Scrcpy-Frp-%E8%BF%9C%E7%A8%8B%E6%93%8D%E6%8E%A7-%E8%B0%83%E8%AF%95Android%E6%89%8B%E6%9C%BA/"/>
      <url>/2023/06/25/Android-Scrcpy-Frp-%E8%BF%9C%E7%A8%8B%E6%93%8D%E6%8E%A7-%E8%B0%83%E8%AF%95Android%E6%89%8B%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">1. 安装msys2</span><br><span class="line">https://www.msys2.org/</span><br><span class="line"></span><br><span class="line">2. 安装环境</span><br><span class="line">参考文档</span><br><span class="line">https://blog.csdn.net/u012787710/article/details/130430216</span><br><span class="line"></span><br><span class="line">pacman -S mingw-w64-x86_64-SDL2</span><br><span class="line">pacman -S mingw-w64-x86_64-ffmpeg</span><br><span class="line">pacman -S mingw-w64-x86_64-libusb</span><br><span class="line">pacman -S mingw-w64-x86_64-make</span><br><span class="line">pacman -S mingw-w64-x86_64-pkg-config</span><br><span class="line">pacman -S mingw-w64-x86_64-meson</span><br><span class="line"></span><br><span class="line">3.</span><br><span class="line">pwd</span><br><span class="line">git clone https://github.com/Genymobile/scrcpy.git</span><br><span class="line"></span><br><span class="line">4.</span><br><span class="line"># 进入代码仓</span><br><span class="line">cd./ scrcpy/</span><br><span class="line"></span><br><span class="line"># 编译scrcpy-server 如果慢 跳过 下载编译好的 https://github.com/Genymobile/scrcpy/releases/tag/v2.0</span><br><span class="line">./server/scripts/build-wrapper.sh &quot;server&quot; &quot;server/scrcpy-server&quot; &quot;release&quot;</span><br><span class="line"></span><br><span class="line"># 我放入了 scrcpy-server</span><br><span class="line">scrcpy\server\scrcpy-server</span><br><span class="line"></span><br><span class="line"># 编译Scrcpy.exe</span><br><span class="line">meson x --buildtype release --strip -Db_lto=true -Dprebuilt_server=./server/scrcpy-server-v2.0</span><br><span class="line"></span><br><span class="line">ninja.exe -Cx</span><br><span class="line"></span><br><span class="line">./run x</span><br><span class="line">---&gt;ERROR: Command not found: [adb], [start-server]</span><br><span class="line">---&gt;解: 放入代码仓根目录 adb.exe AdbWinApi.dll AdbWinUsbApi.dll</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Debug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/06/25/hello-world/"/>
      <url>/2023/06/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
